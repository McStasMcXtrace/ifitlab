{"format": "IFL", "version": "0.1", "created": "20190905_1324", "entries": [{"created": "2018-08-16 13:46:39+00:00", "org_username": "mcstas", "title": "tut. 1.1) Data loading", "description": "Tutorial 1) Data loading\r\n\r\nClick on each node to display info. The \"literal\" node is thesmaller one. When clickin on it, a large text field appears, containing the url of a data file.\r\n\r\nWe will now link the three nodes to plot data on the screen.\r\n\r\n1) Drag the anchor of the literal node (it is the smallest one) to the top anchor of the IData node. (The anchors are the small white circles on nodes.)\r\n\r\n2) Link the \"IData\" node to the gray \"data\" node. The latter is a \"handle\" node that can store your loaded data, while the former is a constructor node. This can be thought of as a matlab variable.\r\n\r\nThe three linked nodes now form a structure which can be executed.\r\n\r\n3) Run \"data\" by clicking on it and pressing \"Run\" at the top of the screen. You can also simply double click it. A plot should now appear on the screen. Good work completing the first tutorial!\r\n\r\nPRO TIP: At any time doing these tutorials if it gets messed up, use the \"Revert\" button to go back to the beginning.\r\n\r\nBy the way, here are a few more data file urls. If you wish, copy-paste them into the literal node. Now repeat the process of running/double clicking \"data\" to load and plot. One of them is a 2D plot, and do try using some of the buttons on the plot window:\r\n\r\nhttp://sim.e-neutrons.org/static/data/jaga15_SANSsimple_20160224_150152/mcstas/PSD.txt\r\n\r\nhttps://raw.githubusercontent.com/McStasMcXtrace/ifitlab/master/iflproj/testdata/dgauss_01.dat", "excomment": "link, then load using a data handle", "listidx": 0, "graphdef": {"nodes": {}, "links": {}, "datas": {}, "labels": {}}}, {"created": "2018-08-16 13:46:42+00:00", "org_username": "mcstas", "title": "tut. 1.2) Graph drawing", "description": "Tutorial 2) Graph drawing\r\n\r\nThe data you loaded in tutorial 1 may have looked like a gaussian peak. Let's create a graph to fit a gaussian model to data.\r\n\r\n1) Click \"fit\" under FUNCTIONS, then click somewhere near the center of the screen. The \"fit\" node represents a fitting algorithm. It takes one idata and one ifunc object each, and outputs a new ifunc object.\r\n\r\n2) Create an \"ifunc\" handle to store the \"fit\" output. (This is from the HANDLES menu, not the capitalised \"IFunc\" from TOOLS.) Then create a \"Gauss\" model constructor node from MODELS.\r\n\r\nYou now have all the nodes needed to produce the fit! (They are literal, IData, idata, fit, ifunc and Gauss.) All that remains is connecting the graph, and running it.\r\n\r\n3) Connect the graph. It needs the data and the Gauss as input, and its output should go to your ifunc handle (the one with the concentric circles). Note that you need to input the nodes in the right places, matching the types shown in the anchor tooltips.\r\n\r\n4) Run \"data\", then run the output ifunc node.\r\n\r\nTry to produce the fit yourself. However, a correct answer is provided in the next tutorial!\r\n\r\n5) OPTIONAL: Re-label the ifunc handle node to have the name \"model\", this is done by first clickin on the node, then editing the label field (top right hand side of the screen).", "excomment": "create fit and ifunc nodes", "listidx": 3, "graphdef": {"nodes": {"o0": [935.5157416420252, 389.42156714097473, "o0", "", "literal", "handles.literal"], "id0": [935.4658931089454, 597.0866045278881, "id0", "", "data", "handles.idata"], "f0": [935.5157416420252, 479.42156714097473, "f0", "", "IData", "tools.IData"]}, "links": {"o0": [["o0", 0, "f0", 0, 0]], "f0": [["f0", 0, "id0", 0, 0]]}, "datas": {"o0": "Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pRml0L21hc3Rlci9EYXRhL3N2MTg1MC5zY24i", "f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ=="}, "labels": {}}}, {"created": "2018-08-16 13:46:43+00:00", "org_username": "mcstas", "title": "tut. 1.3) Fitting simple data", "description": "Tutorial 3) Fitting to a gauss\r\n\r\nHere's an example of the graph to fit a gaussian to data from tutorial 2. In this tutorial, we are going to run the fitting algorithm, and evaluate the output model!\r\n\r\n1) Double click on \"data\".\r\n\r\n2) Double click on \"fitted\".\r\n\r\nA plot of a gaussian appears. To really evaluate the fit results, we need to plot data and fit in the same plot window.\r\n\r\n3) Drag the \"fitted\" node onto the data plot window with your RIGHT mouse button. (On a mac, hold the COMMAND key while dragging. You can also ctrl-drag on linux, but beware: ctrl-click will delete the node.)\r\n\r\nNOTE: In iFitLab, program state is symbolised by data and model handles, with underlying server-side objects containing actual state. However, the state of these objects is not determined by the current state of the graph, but by the state or the graph at the time they were run. State stays the same even when you change the surrounding nodes and links of the graph. In a sense, you commit these changes when you run a node.\r\n\r\nYou can thus remove all nodes except for \"data\" and \"fitted\", and your loaded data and fit result would still exist and be plotable - but you could not be re-create them before redrawing the graph.", "excomment": "load and fit to gaussian", "listidx": 4, "graphdef": {"nodes": {"id0": [870.1331213510114, 464.82877668527783, "id0", "", "data", "handles.idata"], "o0": [869.5616927795814, 246.68591954241901, "o0", "", "", "handles.literal"], "f0": [869.5616927795814, 336.685919542419, "f0", "", "IData", "tools.IData"], "f1": [973.0323593176105, 600.2279331024872, "f1", "", "fit", "tools.fit"], "if0": [973.1506853324645, 743.5929223631069, "if0", "", "fitted", "handles.ifunc"], "f2": [1069.38284907979, 464.7853425848399, "f2", "", "Gauss", "models.Gauss"]}, "links": {"id0": [["id0", 0, "f1", 0, 0]], "o0": [["o0", 0, "f0", 0, 0]], "f0": [["f0", 0, "id0", 0, 0]], "f1": [["f1", 0, "if0", 0, 0]], "f2": [["f2", 0, "f1", 1, 0]]}, "datas": {"o0": "Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pRml0L21hc3Rlci9EYXRhL3N2MTg1MC5zY24i", "f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f1": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9", "f2": "eyJkYXRhc2hhcGUiOiBudWxsfQ=="}, "labels": {}}}, {"created": "2018-08-16 13:46:44+00:00", "org_username": "mcstas", "title": "tut. 1.4) Review", "description": "Tutorial 4) Review, connect the dots\r\n\r\nThis is a small exercise. Use what you have learned during tutorials 1-3 to recreate the fit of a gaussian model to data. \r\n\r\nWe have cheated a little, and created all the nodes you need for this task. Here is a link to the data file, to copy-paste into the large text area of the literal node:\r\n\r\nhttps://raw.githubusercontent.com/McStasMcXtrace/iFit/master/Data/sv1850.scn\r\n\r\nGood luck!\r\n\r\nTips:\r\n\r\n- press \"h\" to open a help dialog with useful tips (but, please click away from this window first).\r\n- you can move nodes around by dragging them with the mouse\r\n- hover the mouse pointer over the \"anchors\" of nodes to see what kind of types it accepts (for input nodes), or outputs (for output nodes)", "excomment": "repeat the process", "listidx": 6, "graphdef": {"nodes": {"id0": [746.0808973169646, 654.8240581456005, "id0", "", "data", "handles.idata"], "o0": [914.4897306227396, 372.27092279103766, "o0", "", "", "handles.literal"], "f0": [1106.8563035507536, 525.4069272083393, "f0", "", "IData", "tools.IData"], "f1": [842.2723945815594, 392.8900741026143, "f1", "", "fit", "tools.fit"], "if0": [1139.3362104848025, 428.9751809165052, "if0", "", "fitted", "handles.ifunc"], "f2": [864.1917299379667, 578.6668870709243, "f2", "", "Gauss", "models.Gauss"]}, "links": {}, "datas": {"f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f1": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9", "f2": "eyJkYXRhc2hhcGUiOiBudWxsfQ=="}, "labels": {}}}, {"created": "2018-08-16 13:46:45+00:00", "org_username": "mcstas", "title": "tut. 1.5) Methods", "description": "Tutorial 5) Methods alter objects\r\n\r\nIn the best of worlds, functions do not alter object state, but rather create new state. However, sometimes, altering existing object state is exactly what we want to do. METHODS fulfill this role as operators belonging to objects, that are able to alter their state in various ways.\r\n\r\n1) Connect \"data\" with its method, \"mask\". This method will mask an inteval of points. Do this by right-mouse dragging 'data' onto 'mask'. (Or by command-dragging on a mac.)\r\n\r\n2) Run \"data\" to load a data file into memory.\r\n\r\nWe now have some loaded state that can be changed, and to do this we have to explicitly run the method.\r\n\r\n3) Run \"mask\" - notice that the plot gets updated, and the peak is no longer present with us.\r\n\r\nYou can experiment with this. Change the input parameters for 'mask' and run it again, this will result in different intervals being masked away. Remember that you can always reload data from file, by running the \"data\" node one more time.\r\n\r\nMethods are used to select or prepare data for certain operations, and to configure fitting models before use. This configuration process is used extensively in the full analysis examples. There is nothing surprising in this, since only a few, simple data sets can be fitted directly to simple out-of-the-box models.", "excomment": "remove side peak to prep fitting", "listidx": 7, "graphdef": {"nodes": {"o0": [979.1706880389244, 319.27377949818674, "o0", "", "", "handles.literal"], "id0": [980.0177847011294, 591.603175520436, "id0", "", "data", "handles.idata"], "f0": [979.1706880389244, 409.27377949818674, "f0", "", "IData", "tools.IData"], "o2": [872.8090136623739, 499.50278576336365, "o2", "", "", "handles.literal"], "o1": [905.6285192414236, 499.50278576336365, "o1", "", "", "handles.literal"], "f1": [889.2187664518988, 592.5671184230173, "f1", "", "mask", "tools.IData.mask"]}, "links": {"o0": [["o0", 0, "f0", 0, 0]], "f0": [["f0", 0, "id0", 0, 0]], "o2": [["o2", 0, "f1", 0, 0]], "o1": [["o1", 0, "f1", 1, 0]], "f1": [["f1", -1, "id0", -1, 0]]}, "datas": {"o0": "Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pZml0bGFiL21hc3Rlci9pZmxwcm9qL3Rlc3RkYXRhL2RnYXVzc18wMS5kYXQi", "f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "o2": "MC4wMjU=", "o1": "MC4wMjc="}, "labels": {}}}, {"created": "2018-08-16 13:46:46+00:00", "org_username": "mcstas", "title": "ex. 1) Peak on gaussian background", "description": "This example illustrates a three step analysis process.\r\n\r\nData is a single peak on a gaussian background. We therefore need to fit the sum of two functions - e.g. a Lorenz plus a Gauss - but we can not do this directly, due to optimization convergence issues. The fitting algorightm needs a good starting guess to produce a usable fit!\r\n\r\n1) Pre-fit a gaussian to background by removing the peak from data. This happens in the right side of the graph.\r\n\r\n2) Remove the background, and pre-fit the actual peak. Left side of the graph.\r\n\r\n3) Create the fitting function as the sum of the two pre-fitted models. This final model should have pretty a good starting guess from its combined, pre-fitted parameters, that it can actually converge in the final optimization step.\r\n\r\nBy double clicking on the the idata and ifunc handles, and their associated and correctly configured methods, you will be go through steps 1-3 to fit data.\r\n\r\nNOTE: You will need to use the guess and fixpars methods to get a good fit to the background. I invite you to experiment with the order in which you run nodes, to see why...", "excomment": "analysis process demo", "listidx": 9, "graphdef": {"nodes": {"id0": [900.0605027540335, 477.15933781250556, "id0", "", "data", "handles.idata"], "f0": [897.5398834207203, 325.1168709171001, "f0", "", "IData", "tools.IData"], "id2": [1048.0443687188285, 473.6373262399374, "id2", "", "bgdata", "handles.idata"], "f1": [588.1791298429641, 381.43514893930234, "f1", "", "mask", "tools.IData.mask"], "f2": [505.2958811119995, 445.77503275432935, "f2", "", "mask", "tools.IData.mask"], "f3": [1128.8337646332843, 418.2649669303381, "f3", "", "mask", "tools.IData.mask"], "f4": [1259.0386659852688, 406.5310604934432, "f4", "", "Gauss", "models.Gauss"], "f5": [1346.161655405867, 397.6819228106761, "f5", "", "guess", "tools.IFunc.guess"], "f6": [1411.435677972799, 454.94654070554424, "f6", "", "fixpa", "tools.IFunc.fixpars"], "f7": [731.9160331611315, 475.017899292025, "f7", "", "Lorentz", "models.Lorentz"], "f8": [689.8397361116106, 594.1804746984283, "f8", "", "fit", "tools.fit"], "if1": [771.600037048469, 665.3578941618732, "if1", "", "peakfit", "handles.ifunc"], "f9": [1191.7762864422698, 559.6845969144315, "f9", "", "fit", "tools.fit"], "if2": [1139.6782138753924, 658.578667609562, "if2", "", "bgfit", "handles.ifunc"], "f10": [951.8943214929676, 690.5075264863822, "f10", "", "add_models", "models.add_models"], "f11": [871.8746710088817, 775.9298366421399, "f11", "", "fit", "tools.fit"], "if3": [955.7247169066029, 852.5805542594298, "if3", "", "result", "handles.ifunc"], "o1": [488.8861283224746, 352.7107000946757, "o1", "", "", "handles.literal"], "o2": [521.7056339015244, 352.7107000946757, "o2", "", "", "handles.literal"], "o3": [571.7693770534393, 288.3708162796487, "o3", "", "", "handles.literal"], "o4": [604.588882632489, 288.3708162796487, "o4", "", "", "handles.literal"], "o5": [1112.4240118437594, 325.2006342706845, "o5", "", "", "handles.literal"], "o6": [1145.2435174228092, 325.2006342706845, "o6", "", "", "handles.literal"], "o7": [1346.161655405867, 303.1819228106761, "o7", "", "", "handles.literal"], "o8": [1411.435677972799, 360.44654070554424, "o8", "", "", "handles.literal"], "o9": [897.5398834207203, 235.11687091710007, "o9", "", "", "handles.literal"], "id1": [611.1383560555973, 482.77968057270266, "id1", "", "peakdata", "handles.idata"], "if0": [1317.947865206199, 490.7801050631908, "if0", "", "bgmodel", "handles.ifunc"]}, "links": {"id0": [["id0", 0, "f11", 0, 0]], "f0": [["f0", 0, "id0", 0, 0], ["f0", 0, "id2", 0, 0], ["f0", 0, "id1", 0, 0]], "id2": [["id2", -1, "f3", -1, 0], ["id2", 0, "f9", 0, 0]], "f4": [["f4", 0, "if0", 0, 0]], "f7": [["f7", 0, "f8", 1, 0]], "f8": [["f8", 0, "if1", 0, 0]], "if1": [["if1", 0, "f10", 0, 0]], "f9": [["f9", 0, "if2", 0, 0]], "if2": [["if2", 0, "f10", 1, 0]], "f10": [["f10", 0, "f11", 1, 0]], "f11": [["f11", 0, "if3", 0, 0]], "o1": [["o1", 0, "f2", 0, 0]], "o2": [["o2", 0, "f2", 1, 0]], "o3": [["o3", 0, "f1", 0, 0]], "o4": [["o4", 0, "f1", 1, 0]], "o5": [["o5", 0, "f3", 0, 0]], "o6": [["o6", 0, "f3", 1, 0]], "o7": [["o7", 0, "f5", 0, 0]], "o8": [["o8", 0, "f6", 0, 0]], "o9": [["o9", 0, "f0", 0, 0]], "id1": [["id1", -1, "f1", -1, 0], ["id1", -1, "f2", -1, 0], ["id1", 0, "f8", 0, 0]], "if0": [["if0", -1, "f5", -1, 0], ["if0", -1, "f6", -1, 0], ["if0", 0, "f9", 1, 0]]}, "datas": {"f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f4": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f7": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f8": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9", "f9": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9", "f10": "e30=", "f11": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9", "o1": "MA==", "o2": "MC4wMjQ4", "o3": "MC4wMjY4", "o4": "MQ==", "o5": "MC4wMjU=", "o6": "MC4wMjc=", "o7": "eyJBbXBsaXR1ZGUiOiAwLjE3Nzg5ODgzMjIzNzAwODQ4LCAiQ2VudHJlIjogMC4wMjE1MDI3MTYwNTI4OTcwNjcsICJIYWxmV2lkdGgiOiAwLjAwMzA2MjE4OTk3NDgxMjIxMTcsICJCYWNrZ3JvdW5kIjogMH0=", "o8": "WyJCYWNrZ3JvdW5kIl0=", "o9": "Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pZml0bGFiL21hc3Rlci9pZmxwcm9qL3Rlc3RkYXRhL2RnYXVzc18wMS5kYXQi"}, "labels": {}}}, {"created": "2018-10-02 08:43:04+00:00", "org_username": "mcstas", "title": "ex. 3) Vectorized background fits", "description": "This example shows how to fit multiple backgrounds simultaneously, by the process known as vectorization. Such processes are widely used in numpy, MATLAB and so on and provide a huge productivity boost.\r\n\r\nInspect the literal node on top of the \"IData\" constructor. (You do this by first selecting it by clicking on it. To the right, you will see its value in a text area.)\r\n\r\nYou will notice that it has a list of three lists, each containing three strings, the urls of data files. We say that this structure has a \"datashape\", \"shape\" or \"size\" of [3,3]. \r\n\r\nWe shall now load these nine data files and operate on them in parallel.\r\n\r\nNotice that each of the other literal nodes in the graph also contain a nested list of shape [3,3]. This is a requirement for vectorization.\r\n\r\nIf you click on the node \"Gauss\", you will notice that its 'datashape' property is set to [3,3]. Rather than a single gaussian model, the node will therefore create a nested list of [3,3] gaussian models. All shapes of data, models, and configuration parameters must match.\r\n\r\nLet's get started. First, run the node 'vdata', then 'mask', 'vmodel', 'guess', 'fixpa', and finally 'vfit'.", "excomment": "vectorized tasks demo", "listidx": 16, "graphdef": {"nodes": {"o3": [761.3970591063197, 269.07038998774703, "o3", "", "", "handles.literal"], "f2": [761.3970591063197, 359.07038998774703, "f2", "", "IData", "tools.IData"], "id0": [761.2708272786657, 509.5589913332966, "id0", "", "vdata", "handles.idata"], "f6": [854.0473987016071, 506.0814158302097, "f6", "", "mask", "tools.IData.mask"], "o1": [837.6376459120822, 413.0170831705561, "o1", "", "", "handles.literal"], "o2": [870.457151491132, 413.0170831705561, "o2", "", "", "handles.literal"], "f11": [923.2145347769297, 660.9660866730502, "f11", "", "fit", "tools.fit"], "f15": [1089.37387338783, 357.7042793722155, "f15", "", "Gauss", "models.Gauss"], "if4": [923.2195824163177, 795.5923279636598, "if4", "", "vfit", "handles.ifunc"], "if6": [1088.1509420331313, 505.9511689605648, "if6", "", "vmodel", "handles.ifunc"], "f24": [1166.7830328566613, 506.7858015728701, "f24", "", "fixpa", "tools.IFunc.fixpars"], "o19": [1166.7830328566613, 412.2858015728701, "o19", "", "", "handles.literal"], "f26": [1007.8160178231622, 504.58292712166497, "f26", "", "guess", "tools.IFunc.guess"], "o20": [1007.8160178231622, 410.08292712166497, "o20", "", "", "handles.literal"]}, "links": {"o3": [["o3", 0, "f2", 0, 0]], "f2": [["f2", 0, "id0", 0, 0]], "id0": [["id0", -1, "f6", -1, 0], ["id0", 0, "f11", 0, 0]], "o1": [["o1", 0, "f6", 0, 0]], "o2": [["o2", 0, "f6", 1, 0]], "f11": [["f11", 0, "if4", 0, 0]], "f15": [["f15", 0, "if6", 0, 0]], "if6": [["if6", -1, "f24", -1, 0], ["if6", -1, "f26", -1, 0], ["if6", 0, "f11", 1, 0]], "o19": [["o19", 0, "f24", 0, 0]], "o20": [["o20", 0, "f26", 0, 0]]}, "datas": {"o3": "W1siaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01jU3Rhc01jWHRyYWNlL2lmaXRsYWIvbWFzdGVyL2lmbHByb2ovdGVzdGRhdGEvdmVjdDAxL2QxMS5kYXQiLCAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01jU3Rhc01jWHRyYWNlL2lmaXRsYWIvbWFzdGVyL2lmbHByb2ovdGVzdGRhdGEvdmVjdDAxL2QxMi5kYXQiLCAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01jU3Rhc01jWHRyYWNlL2lmaXRsYWIvbWFzdGVyL2lmbHByb2ovdGVzdGRhdGEvdmVjdDAxL2QxMy5kYXQiXSwgWyJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWNTdGFzTWNYdHJhY2UvaWZpdGxhYi9tYXN0ZXIvaWZscHJvai90ZXN0ZGF0YS92ZWN0MDEvZDIxLmRhdCIsICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWNTdGFzTWNYdHJhY2UvaWZpdGxhYi9tYXN0ZXIvaWZscHJvai90ZXN0ZGF0YS92ZWN0MDEvZDIyLmRhdCIsICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWNTdGFzTWNYdHJhY2UvaWZpdGxhYi9tYXN0ZXIvaWZscHJvai90ZXN0ZGF0YS92ZWN0MDEvZDIzLmRhdCJdLCBbImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pZml0bGFiL21hc3Rlci9pZmxwcm9qL3Rlc3RkYXRhL3ZlY3QwMS9kMzEuZGF0IiwgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pZml0bGFiL21hc3Rlci9pZmxwcm9qL3Rlc3RkYXRhL3ZlY3QwMS9kMzIuZGF0IiwgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pZml0bGFiL21hc3Rlci9pZmxwcm9qL3Rlc3RkYXRhL3ZlY3QwMS9kMzMuZGF0Il1d", "f2": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "o1": "W1swLjAyNjYsIDAuMDIzNSwgMC4wMTk0XSwgWzAuMDI1NywgMC4wMjM1LCAwLjAyMDddLCBbMC4wMjI1LCAwLjAyMSwgMC4wMjA2XV0=", "o2": "W1swLjAyNzcsIDAuMDI1OCwgMC4wMjMxXSwgWzAuMDI3MSwgMC4wMjUyLCAwLjAyMzJdLCBbMC4wMjY0LCAwLjAyNTIsIDAuMDIzNl1d", "f11": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9", "f15": "eyJkYXRhc2hhcGUiOiBbMywgM119", "o19": "W1tbIkJhY2tncm91bmQiXSwgWyJCYWNrZ3JvdW5kIl0sIFsiQmFja2dyb3VuZCJdXSwgW1siQmFja2dyb3VuZCJdLCBbIkJhY2tncm91bmQiXSwgWyJCYWNrZ3JvdW5kIl1dLCBbWyJCYWNrZ3JvdW5kIl0sIFsiQmFja2dyb3VuZCJdLCBbIkJhY2tncm91bmQiXV1d", "o20": "W1t7IkFtcGxpdHVkZSI6ICJOYU4iLCAiQ2VudHJlIjogMC4wMjIsICJIYWxmV2lkdGgiOiAiTmFOIiwgIkJhY2tncm91bmQiOiAwfSwgeyJBbXBsaXR1ZGUiOiAiTmFOIiwgIkNlbnRyZSI6IDAuMDIyLCAiSGFsZldpZHRoIjogIk5hTiIsICJCYWNrZ3JvdW5kIjogMH0sIHsiQW1wbGl0dWRlIjogIk5hTiIsICJDZW50cmUiOiAwLjAyMiwgIkhhbGZXaWR0aCI6ICJOYU4iLCAiQmFja2dyb3VuZCI6IDB9XSwgW3siQW1wbGl0dWRlIjogIk5hTiIsICJDZW50cmUiOiAwLjAyMiwgIkhhbGZXaWR0aCI6ICJOYU4iLCAiQmFja2dyb3VuZCI6IDB9LCB7IkFtcGxpdHVkZSI6ICJOYU4iLCAiQ2VudHJlIjogMC4wMjIsICJIYWxmV2lkdGgiOiAiTmFOIiwgIkJhY2tncm91bmQiOiAwfSwgeyJBbXBsaXR1ZGUiOiAiTmFOIiwgIkNlbnRyZSI6IDAuMDIyLCAiSGFsZldpZHRoIjogIk5hTiIsICJCYWNrZ3JvdW5kIjogMH1dLCBbeyJBbXBsaXR1ZGUiOiAiTmFOIiwgIkNlbnRyZSI6IDAuMDIyLCAiSGFsZldpZHRoIjogIk5hTiIsICJCYWNrZ3JvdW5kIjogMH0sIHsiQW1wbGl0dWRlIjogIk5hTiIsICJDZW50cmUiOiAwLjAyMiwgIkhhbGZXaWR0aCI6ICJOYU4iLCAiQmFja2dyb3VuZCI6IDB9LCB7IkFtcGxpdHVkZSI6ICJOYU4iLCAiQ2VudHJlIjogMC4wMjIsICJIYWxmV2lkdGgiOiAiTmFOIiwgIkJhY2tncm91bmQiOiAwfV1d"}, "labels": {}}}, {"created": "2018-10-09 14:31:17+00:00", "org_username": "mcstas", "title": "tut 2.1) Peak on slope", "description": "This tutorial investigates a \"peak on sloping background\" data set. We will see that a fit of this type may require more than the correct model to converge.\r\n\r\nRun the nodes 'model', 'data' and 'outfit'. As you can see, the model, created by adding a linear model to a gaussian, does not at all converge to a fit on the first go.\r\n\r\nOften, we can increase the chances of success by providing a good starting guess. For this, we need to add a few methods to the model node, in order to better prepare it to be fitted to data. In short, it needs to \"look more like\" the data to begin with.\r\n\r\nAdd a 'guess' and a 'fixpa' nodes next to the model node. Connect the nodes to this object by ctrl-dragging, meta-dragging og right-mouse-dragging method onto object. Provide a literal node for each method, and connect these as well. (By the way, he name 'fixpa' stands for \"fix parameters\".)\r\n\r\nYou are now ready to proceed to the next step of the tutorial.", "excomment": "a fit attempt", "listidx": 11, "graphdef": {"nodes": {"id0": [798.1271720855864, 537.5354352797499, "id0", "", "data", "handles.idata"], "o0": [798.2826183241646, 308.1685857121227, "o0", "", "", "handles.literal"], "f0": [798.2826183241646, 398.1685857121227, "f0", "", "IData", "tools.IData"], "f1": [991.0184699966751, 274.81441505056546, "f1", "", "Gauss", "models.Gauss"], "f2": [1099.9651826229463, 270.4641202145063, "f2", "", "Lin", "models.Lin"], "f3": [1043.8218228172002, 408.3728092518705, "f3", "", "add_models", "models.add_models"], "f4": [921.3343491612937, 663.5870441719735, "f4", "", "fit", "tools.fit"], "if0": [1043.8467901403435, 539.2174965435895, "if0", "", "model", "handles.ifunc"], "if1": [920.288235132384, 801.60548263536, "if1", "", "outfit", "handles.ifunc"]}, "links": {"id0": [["id0", 0, "f4", 0, 0]], "o0": [["o0", 0, "f0", 0, 0]], "f0": [["f0", 0, "id0", 0, 0]], "f1": [["f1", 0, "f3", 0, 0]], "f2": [["f2", 0, "f3", 1, 0]], "f3": [["f3", 0, "if0", 0, 0]], "f4": [["f4", 0, "if1", 0, 0]], "if0": [["if0", 0, "f4", 1, 0]]}, "datas": {"o0": "Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pZml0bGFiL21hc3Rlci9pZmxwcm9qL3Rlc3RkYXRhL3BlYWtvbnNsb3BlLmRhdCI=", "f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f1": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f2": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f3": "e30=", "f4": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9"}, "labels": {}}}, {"created": "2018-10-09 14:31:23+00:00", "org_username": "mcstas", "title": "tut 2.2) Peak on slope", "description": "In this tutorial, we will learn to provide a good starting guess to help the fitting algorithm converge. We will learn a few handy UI features that are meant to support this process.\r\n\r\nRun the 'model' node, then notice its six parameters in the user panel, which appears to the right. All parameters have the value \"null\", which means that iFit will provide its own best guess for those parameters. As we say previously, this is not good enough.\r\n\r\nNotice the two parameters \"Background\" and \"Constant\". These are both constant elements that originate from the Gauss and the Lin model, respectively. Having two such features describe the same thing, is not a good idea, since the parameters may work against one another and potentially diverge. We need to FIX one of them to the value zero, and this is why we also need the 'fixpa' method.\r\n\r\nAlso notice the two buttons, \"copy dict\" and \"copy keys\". These are used to copy the parameter names, to be pasted as input for 'guess' and 'fixpa'. Now we are ready to prepare the model.\r\n\r\n- With model selected, click on 'copy keys'.\r\n- Select the input literal for 'fixpa', and paste into the text area.\r\n- Delete all lines with parameters that are NOT the \"Background\" parameter.\r\n- Select the model node again.\r\n- Click on \"copy dict\". \r\n- Select the input literal node for 'guess', and paste into its text area.\r\n- Change the value of \"Background\" from \"null\" to to 0 (zero), but leave all other strings, commas and curly brackets intact.\r\n\r\nIn the next step of the tutorial we will complete the guess and finally converge to a usable fit.", "excomment": "learn GUI features", "listidx": 13, "graphdef": {"nodes": {"id0": [758.0125684495176, 536.7460889617792, "id0", "", "data", "handles.idata"], "o0": [757.2969546248434, 311.8632757447454, "o0", "", "", "handles.literal"], "f0": [757.2969546248434, 401.8632757447454, "f0", "", "IData", "tools.IData"], "f1": [972.8595596356029, 257.56987505690796, "f1", "", "Gauss", "models.Gauss"], "f2": [1058.5063989536484, 258.59368822391133, "f2", "", "Lin", "models.Lin"], "f3": [1019.6207035739709, 403.89938193466065, "f3", "", "add", "models.add_models"], "f4": [904.7649289967832, 670.7857820569961, "f4", "", "fit", "tools.fit"], "if0": [1019.7207824471745, 535.0443734028559, "if0", "", "model", "handles.ifunc"], "if1": [905.0871158891545, 807.1320553181492, "if1", "", "outfit", "handles.ifunc"], "m0": [936.5738548932759, 535.4229181391067, "m0", "", "guess", "tools.IFunc.guess"], "m1": [1103.462131538667, 533.6063460512951, "m1", "", "fixpa", "tools.IFunc.fixpars"], "o1": [936.5738548932759, 440.92291813910674, "o1", "", "", "handles.literal"], "o2": [1103.462131538667, 439.1063460512951, "o2", "", "", "handles.literal"]}, "links": {"id0": [["id0", 0, "f4", 0, 0]], "o0": [["o0", 0, "f0", 0, 0]], "f0": [["f0", 0, "id0", 0, 0]], "f1": [["f1", 0, "f3", 0, 0]], "f2": [["f2", 0, "f3", 1, 0]], "f3": [["f3", 0, "if0", 0, 0]], "f4": [["f4", 0, "if1", 0, 0]], "if0": [["if0", -1, "m0", -1, 0], ["if0", 0, "f4", 1, 0]], "m1": [["m1", -1, "if0", -1, 0]], "o1": [["o1", 0, "m0", 0, 0]], "o2": [["o2", 0, "m1", 0, 0]]}, "datas": {"o0": "Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pZml0bGFiL21hc3Rlci9pZmxwcm9qL3Rlc3RkYXRhL3BlYWtvbnNsb3BlLmRhdCI=", "f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f1": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f2": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f3": "e30=", "f4": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9"}, "labels": {}}}, {"created": "2018-10-09 14:31:24+00:00", "org_username": "mcstas", "title": "tut 2.3) Peak on slope", "description": "In this final tutorial of the series, we will give a usable fit for the \"peak on sloping background\" data.\r\n\r\nFirst, double click on 'data'. A plot showing the 1D data will open.\r\n\r\nNow click somewhere on the plot - this should result in an x and y coordinate being displayed near the top of the screen. These are the (x,y) values of the data point where you clicked, and you can use the links \"cp_x\" and \"cp_y\" to copy these values to the clipboard.\r\n\r\nNow let's return to the task at hand. We need to provide a good guess for the parameters \"Amplitude\", \"Centre\", and \"HalfWidth\". To do this, click the top of the peak. The x value should be close to the value of the parameter \"Center\", and the y value should be a good guess for the parameter \"Amplitude\". Now, replace the two \"null\" words with these values, respectively. (You should have the input literal for 'guess' selected at this point.)\r\n\r\nNow all we need is to find a value for \"HalfWidth\" in a similar way. Do this now - you'll need to click at least one more time to get this done.\r\n\r\nFinally, generate the model by running the 'model' node, then run 'guess' and 'fixpa'. The model is now prepared with a guess, and a parameter has been fixed during optimization. Run 'outfit' to fit. The fit now converges, as you can se by plotting data and outfit in the same window. Good work!\r\n\r\nHINT: If it really doesn't work yet, here are some values you can try: 6.35, 0.02 and 0.0003.\r\n\r\nEXTRA: Typically, this procedure will result in a pretty good peak fit, but a less satisfying background slope fit. Can you adjust the parameters of guess and fixpa, and run a sequence that produces a perfect fit?", "excomment": "experiment with guess", "listidx": 15, "graphdef": {"nodes": {"id0": [745.8166161031908, 525.7021733695317, "id0", "", "data", "handles.idata"], "o0": [744.7802345882, 306.8507283676785, "o0", "", "", "handles.literal"], "f0": [744.7802345882, 396.8507283676785, "f0", "", "IData", "tools.IData"], "f1": [985.1720334098909, 248.3444364307918, "f1", "", "Gauss", "models.Gauss"], "f2": [1076.6926795100571, 244.75363305154474, "f2", "", "Lin", "models.Lin"], "f3": [1030.948048338651, 398.2067015428108, "f3", "", "add_models", "models.add_models"], "f4": [883.926932507523, 698.099807877592, "f4", "", "fit", "tools.fit"], "if0": [1031.0481272118545, 526.3516930110115, "if0", "", "model", "handles.ifunc"], "if1": [884.414460653834, 834.4393749263049, "if1", "", "outfit", "handles.ifunc"], "m0": [947.9011996579559, 526.7302377472624, "m0", "", "guess", "tools.IFunc.guess"], "m1": [1114.7894763033469, 524.9136656594508, "m1", "", "fixpa", "tools.IFunc.fixpars"], "o1": [947.9011996579559, 432.23023774726244, "o1", "", "", "handles.literal"], "o2": [1114.7894763033469, 430.41366565945077, "o2", "", "", "handles.literal"]}, "links": {"id0": [["id0", 0, "f4", 0, 0]], "o0": [["o0", 0, "f0", 0, 0]], "f0": [["f0", 0, "id0", 0, 0]], "f1": [["f1", 0, "f3", 0, 0]], "f2": [["f2", 0, "f3", 1, 0]], "f3": [["f3", 0, "if0", 0, 0]], "f4": [["f4", 0, "if1", 0, 0]], "if0": [["if0", -1, "m0", -1, 0], ["if0", 0, "f4", 1, 0]], "m1": [["m1", -1, "if0", -1, 0]], "o1": [["o1", 0, "m0", 0, 0]], "o2": [["o2", 0, "m1", 0, 0]]}, "datas": {"o0": "Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NY1N0YXNNY1h0cmFjZS9pZml0bGFiL21hc3Rlci9pZmxwcm9qL3Rlc3RkYXRhL3BlYWtvbnNsb3BlLmRhdCI=", "f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f1": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f2": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f3": "e30=", "f4": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9", "o1": "eyJBbXBsaXR1ZGUiOiBudWxsLCAiQ2VudHJlIjogbnVsbCwgIkhhbGZXaWR0aCI6IG51bGwsICJCYWNrZ3JvdW5kIjogMCwgIkdyYWRpZW50IjogbnVsbCwgIkNvbnN0YW50IjogbnVsbH0=", "o2": "WyJCYWNrZ3JvdW5kIl0="}, "labels": {}}}, {"created": "2019-05-21 12:09:39+00:00", "org_username": "mcstas", "title": "ex. 3) SANS Nanodisc", "description": "", "excomment": "sine2020 nanodisc", "listidx": 17, "graphdef": {"nodes": {"f0": [578.1736007163489, 332.576448702281, "f0", "", "IData", "tools.IData"], "o0": [578.1736007163489, 242.57644870228103, "o0", "", "", "handles.literal"], "o1": [693.2524562002627, 242.71150472350502, "o1", "", "", "handles.literal"], "f1": [693.2524562002627, 332.711504723505, "f1", "", "IData", "tools.IData"], "f6": [1159.1147972056988, 799.5386814561841, "f6", "", "fit", "tools.fit"], "id4": [1051.0795187435601, 638.4557203064323, "id4", "", "guinierre", "handles.idata"], "m0": [951.2828779787043, 640.6235056347218, "m0", "", "mask", "tools.IData.mask"], "o2": [934.8731251891794, 547.5591729750682, "o2", "", "", "handles.literal"], "o3": [967.6926307682292, 547.5591729750682, "o3", "", "", "handles.literal"], "f2": [682.2624461768847, 526.3045257250856, "f2", "", "subtract", "operators.subtract_data"], "f4": [683.7246742596826, 675.3429429317907, "f4", "", "log", "transforms.log"], "f8": [697.2719987713638, 818.1099566682708, "f8", "", "power", "transforms.power"], "f5": [1254.3045014572863, 631.3798741006005, "f5", "", "Lin", "models.Lin"], "m1": [1158.3499565408436, 642.997193686931, "m1", "", "mask", "tools.IData.mask"], "o4": [1141.9402037513187, 549.9328610272775, "o4", "", "", "handles.literal"], "o6": [1174.7597093303684, 549.9328610272775, "o6", "", "", "handles.literal"], "f3": [1002.9031230339227, 227.69097610882858, "f3", "", "IData_1d", "tools.IData_1d"], "o5": [972.1213101346125, 143.11864023809682, "o5", "", "", "handles.literal"], "o7": [1002.9031230339227, 137.69097610882858, "o7", "", "", "handles.literal"], "id2": [1114.8162869967823, 233.7017471085989, "id2", "", "results", "handles.idata"], "f9": [1173.1362409462467, 323.49869660058397, "f9", "", "fit", "tools.fit"], "if2": [1260.7148164849013, 382.8264741122138, "if2", "", "final", "handles.ifunc"], "if0": [1268.5494040588192, 824.981927993399, "if0", "", "allfits", "handles.ifunc"], "id0": [610.7625147135005, 428.147688915743, "id0", "", "sample", "handles.idata"], "id5": [730.0776697053949, 427.72334890642315, "id5", "", "background", "handles.idata"], "id1": [763.4703346441592, 604.9670159630805, "id1", "", "signal", "handles.idata"], "id3": [766.6225186105038, 729.203699094832, "id3", "", "", "handles.idata"], "f11": [1196.5494575973698, 164.8444267560239, "f11", "", "Lin", "models.Lin"], "o8": [1033.684935933233, 143.11864023809684, "o8", "", "", "handles.literal"]}, "links": {"f0": [["f0", 0, "id0", 0, 0]], "o0": [["o0", 0, "f0", 0, 0]], "o1": [["o1", 0, "f1", 0, 0]], "f1": [["f1", 0, "id5", 0, 0]], "f6": [["f6", 0, "if0", 0, 0]], "id4": [["id4", 0, "f6", 0, 0]], "m0": [["m0", -1, "id4", -1, 0]], "o2": [["o2", 0, "m0", 0, 0]], "o3": [["o3", 0, "m0", 1, 0]], "f2": [["f2", 0, "id1", 0, 0]], "f4": [["f4", 0, "id3", 0, 0]], "f8": [["f8", 0, "id4", 0, 0]], "f5": [["f5", 0, "f6", 1, 0]], "m1": [["m1", -1, "id4", -1, 0]], "o4": [["o4", 0, "m1", 0, 0]], "o6": [["o6", 0, "m1", 1, 0]], "f3": [["f3", 0, "id2", 0, 0]], "o5": [["o5", 0, "f3", 0, 0]], "o7": [["o7", 0, "f3", 1, 0]], "id2": [["id2", 0, "f9", 0, 0]], "f9": [["f9", 0, "if2", 0, 0]], "id0": [["id0", 0, "f2", 0, 0]], "id5": [["id5", 0, "f2", 1, 0]], "id1": [["id1", 0, "f4", 0, 0]], "id3": [["id3", 0, "f8", 0, 0]], "f11": [["f11", 0, "f9", 1, 0]], "o8": [["o8", 0, "f3", 2, 0]]}, "datas": {"f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "o0": "Imh0dHA6Ly9lbGVhcm4xLmZ5c2lrLmR0dS5kay9zdGF0aWMvZGF0YS9tY3N0YXNfTmFub2Rpc2NfTG9raV8yMDE5MDUyMV8xMTEwMTIvUURldGVjdG9yLnppcCI=", "o1": "Imh0dHA6Ly9lbGVhcm4xLmZ5c2lrLmR0dS5kay9zdGF0aWMvZGF0YS9tY3N0YXNfTmFub2Rpc2NfTG9raV8yMDE5MDUyMV8wOTUyMDgvUURldGVjdG9yLnppcCI=", "f1": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f6": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9", "o2": "Wy0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMV0=", "o3": "WzAuMDAzNCwgMC4wMDM0LCAwLjAwMzQsIDAuMDAzNCwgMC4wMDM0LCAwLjAwMzQsIDAuMDAzNCwgMC4wMDM0LCAwLjAwMzQsIDAuMDAzNCwgMC4wMDM0LCAwLjAwMzQsIDAuMDAzNCwgMC4wMDM0LCAwLjAwMzQsIDAuMDAzNCwgMC4wMDM0LCAwLjAwMzQsIDAuMDAzNCwgMC4wMDM0XQ==", "f2": "e30=", "f4": "eyJheGlzIjogMH0=", "f8": "eyJheGlzIjogMSwgInBvd2VyIjogMn0=", "f5": "eyJkYXRhc2hhcGUiOiBbMjBdfQ==", "o4": "WzAuMDEyOCwgMC4wMTI4LCAwLjAxMjgsIDAuMDEyOCwgMC4wMTI4LCAwLjAxMjgsIDAuMDEyOCwgMC4wMTI4LCAwLjAxMjgsIDAuMDEyOCwgMC4wMTI4LCAwLjAxMjgsIDAuMDEyOCwgMC4wMTI4LCAwLjAxMjgsIDAuMDEyOCwgMC4wMTI4LCAwLjAxMjgsIDAuMDEyOCwgMC4wMTI4XQ==", "o6": "WzMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDNd", "f3": "e30=", "o5": "WzAuMCwgMS4wLCA0LjQ3MzE2MzIyNDg1NDk5LCAxMC43NDQ4NDA1MzUxMDg4NTksIDIwLjAwOTE4OTIzNjE5NTA5LCAzMi40MTAxMjEzNTQ0OTc5MjUsIDQ4LjA2MzQyNTUzODU4MDE2LCA2Ny4wNjY2MzM4MTU4Nzc2NSwgODkuNTA0MzY5NDUwNTEyMTksIDExNS40NTE1OTgxMjQ5MTg0MywgMTQ0Ljk3NTc2Mjk1NjAyNzUsIDE3OC4xMzgyNjcwNDE5ODE3MiwgMjE0Ljk5NTU0NzU3OTczMjksIDI1NS41OTk4ODA1MzYxNjM2OCwgMjk5Ljk5OTk5OTk5OTk5OTk0XQ==", "o7": "WzE5LjA5MDgyNzQ4Mzk2NzMzLCAxOC45OTEzOTUyMTc5NDAzMTUsIDE4Ljg1ODM1ODE0Mzc4NjM3LCAxOC43NDIwMjA5MTA3NzIyODMsIDE4LjYwNjIwODQ4NDIxMzYxNCwgMTguNDYxNjQzNTA0MTYxNDQ0LCAxOC4yOTQ3NDUwODMwNjI5ODUsIDE4LjE1OTc0NTc1Nzc0MTY0LCAxNy45MDI1NzAyNDg4NTI5NzgsIDE3LjczNjQ4MDk4NDEzODk4NiwgMTcuNTIzMjk3Mzg1MDQ1NjIsIDE3LjI0NDIxNDY3ODEwMTI2LCAxNy4wMDQwNDk4NjcxMzQ0OTgsIDE2Ljc3MDM5MzI4NzI0NDY5LCAxNi4yNjQyODczNjYxNTI4MzZd", "f9": "eyJvcHRpbWl6ZXIiOiAiZm1pbnBvd2VsbCJ9", "f11": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "o8": "WzAuMiwgMC4yLCAwLjIsIDAuMywgMC4zLCAwLjMsIDAuNSwgMC41LCAwLjUsIDAuNSwgMC41LCAwLjgsIDAuOCwgMC44LCAwLjhd"}, "labels": {}}}, {"created": "2019-08-27 11:59:45+00:00", "org_username": "mcstas", "title": "ex. 5) radiograph division", "description": "0", "excomment": "Divide low- and high-wavelength radiographs of a sword", "listidx": 0, "graphdef": {"nodes": {"o1": [768.6796055943934, 328.22116132920803, "o1", "", "", "handles.literal"], "f0": [768.6796055943934, 418.22116132920803, "f0", "", "load", "tools.IData"], "id0": [788.7762650052017, 543.7816873983778, "id0", "", "Low WL", "handles.idata"], "o2": [1142.7893943302056, 341.7808843602341, "o2", "", "", "handles.literal"], "f4": [1142.7893943302056, 431.7808843602341, "f4", "", "load", "tools.IData"], "id4": [1142.4647491577684, 552.8271026565106, "id4", "", "High WL", "handles.idata"], "f9": [961.9900049706164, 590.6424291068851, "f9", "", "divide_data", "operators.divide_data"], "id7": [956.6472998257071, 740.8590075944288, "id7", "", "Result", "handles.idata"]}, "links": {"o1": [["o1", 0, "f0", 0, 0]], "f0": [["f0", 0, "id0", 0, 0]], "id0": [["id0", 0, "f9", 0, 0]], "o2": [["o2", 0, "f4", 0, 0]], "f4": [["f4", 0, "id4", 0, 0]], "id4": [["id4", 0, "f9", 1, 0]], "f9": [["f9", 0, "id7", 0, 0]]}, "datas": {"f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f4": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f9": "e30="}, "labels": {}}}, {"created": "2019-09-05 13:00:43+00:00", "org_username": "mcstas", "title": "ex. 4) background subtraction", "description": "0", "excomment": "Subtract white-field image (background) from radiograph", "listidx": 0, "graphdef": {"nodes": {"o1": [770.0095752741385, 323.0424453946429, "o1", "", "", "handles.literal"], "f0": [770.0095752741385, 413.0424453946429, "f0", "", "load", "tools.IData"], "id0": [790.1062346849468, 538.6029714638116, "id0", "", "Signal", "handles.idata"], "o2": [1144.1193640099495, 336.602168425669, "o2", "", "", "handles.literal"], "f4": [1144.1193640099495, 426.602168425669, "f4", "", "load", "tools.IData"], "id4": [1143.7947188375124, 547.6483867219445, "id4", "", "Background", "handles.idata"], "id7": [957.9772695054522, 735.6802916598626, "id7", "", "Result", "handles.idata"], "f1": [956.9759764249934, 602.5859356051908, "f1", "", "subtract_data", "operators.subtract_data"]}, "links": {"o1": [["o1", 0, "f0", 0, 0]], "f0": [["f0", 0, "id0", 0, 0]], "id0": [["id0", 0, "f1", 0, 0]], "o2": [["o2", 0, "f4", 0, 0]], "f4": [["f4", 0, "id4", 0, 0]], "id4": [["id4", 0, "f1", 1, 0]], "f1": [["f1", 0, "id7", 0, 0]]}, "datas": {"f0": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f4": "eyJkYXRhc2hhcGUiOiBudWxsfQ==", "f1": "e30="}, "labels": {}}}]}